<?xml version="1.0"?>
<rss version="2.0">
  <channel>
    <title>S75 Sections</title>
    <description>
    7/9/2012: Objects, XPath, Regular Expressions
    </description>
    <item>
        <title>MVC Context from Last Section</title>
        <author>P. Myer Nore</author>
        <pubDate>Sat, 07 Jul 2012 14:24:21 GMT</pubDate>
        <description><![CDATA[
        <p>
        In last section, we talked about <strong>Model, View,
        Controller</strong>, and introduced a simple MVC blogging
        application.
        </p>
        <p>
        I'm going to continue using the application in
        examples today, so I will start with
        <strong>app06</strong>, continuing
        with last week's example. The diretory structure can be
        found by using the <code>tree</code> command in linux:
<pre>
.
|-- 06_section_overview.php
`-- app06
    |-- controller
    |   `-- controller.php
    |-- model
    |   |-- data.xml
    |   |-- model.php
    |   `-- rss2sample.xml
    `-- view
        |-- content.php
        |-- header-content.php
        |-- pagination.php
        |-- post.php
        |-- top-bar.php
        `-- view.php
</pre>    
In general, the flow of control follows the normal flow of control for MVC applications, from Controller to Model back to Controller to View: 
<div class="well">
<ol>
<li>06_section_overview.php</li>
<br/><ol>
<li>controller/controller.php</li>
</ol><br/><ol>
<li>model/model.php</li>
<li>model/data.xml</li>
<li>model/model.php</li>
</ol><br/><ol>
<li>controller/controller.php</li>
</ol><br/>
<ol>
<li>view/view.php</li>
<li>view/header-content.php</li>
<li>view/view.php</li>
<li>view/top-bar.php</li>
<li>view/content.php</li>
<li>view/pagination.php</li>
<li>view/post.php</li>
<li>view/content.php</li>
<li>view/view.php</li>
</ol><br/>
<ol>
<li>controller/controller.php</li>
</ol><br/>
<li>06_section_overview.php</li>
</ol></div><!--well-->
        </p> 
        ]]></description>
    </item>
    <item>
        <title>New Features of App06</title>
        <author>P. Myer Nore</author>
        <pubDate>Sat, 07 Jul 2012 12:50:21 GMT</pubDate>
        <description><![CDATA[ 
<p>In <code>app04</code>, we had what's called a <strong>fat
controller</strong>; a lot of data model-specific information was
computed in the controller. If you'll go back and look at last
section's <a
href="../"><code>app04/controller/controller.php</code></a>, you'll see how bloated the controller is. </p>
<p>Having a "fat controller" is usually an indication that your controller is doing things that your model should be doing. <strong>In app06, we've moved this computation to the model</strong>, using what may be a new function to you:<code>call_user_func( $function_name, $parameters)</code>.</p>
<p>As a result, the controller is responsible for requesting
certain special variables names of the model - this is the model's API, or Application Programming Interface. At the top of the controller, we request any variables we need. Then we include the model, and the variables are filled in, ready to pass to the view.</p> 

     ]]></description>
    </item>
    <item>
        <title>Previous Section: Intro to MVC</title>
        <author>P. Myer Nore</author>
        <pubDate>Sat, 30 Jun 2012 12:39:21 GMT</pubDate>
        <description><![CDATA[ 
  <p><h2>Intro to MVC</h2></p>
  <p>Web Developers call dynamic websites <strong>web
applications</strong> because from the coder's perspective,
<strong>dynamic websites are applications that run on a web
server</strong>.</p>
  <p>Modern applications follow <strong>design
patterns</strong>. One very common design pattern is Model, View,
Controller, or MVC.</p>
  <p>To follow MVC when writing an
application, you <em>separate your code</em> according to the
function of the code: <ul> <li><strong>Model</strong> code stores
the application data and <em>models</em> your application's
domain. For example, if you were writing a blogging application,
the Model code would determine what data needs to be stored about
a Blog Post, and take responsibility for storing and retrieving
Blog Post data.</li> <li><strong>View</strong> code produces
anything <em>viewable</em> by the site visitor. For example, in a
blogging application, the View code would turn a Blog Post's data
into HTML and CSS, which would then be rendered in the site
viewer's web browser and determine how the site appears to the
visitor.</li> <li><strong>Controller</strong> code receives all
of site visitor's clicks and other input, and uses them to help
the user <em>control</em> your application.  For example, in a
blogging site, if a user clicks on 'next post', the controller
will receive that click, fetch the appropriate Model from the
model code, send and send it to the View to turn it into the HTML
that the site viewer's browser will render for the Site Viewer's
viewing pleasure.</li> </ul> </p> 
]]>
</description>
</item>
</channel>
</rss>
